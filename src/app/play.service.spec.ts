/**
 * RPS API
 * Rock, paper & scissors
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpResponse, HttpEvent
} from '@angular/common/http';

import { Observable } from 'rxjs';

import { PlayResult } from './model/playResult';

import { BASE_PATH, COLLECTION_FORMATS } from './variables';
import { Configuration } from './configuration';


@Injectable()
export class DefaultService {

  protected basePath = '/';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Lock your next play&#x27;s move
   * 
   * @param moveCode Code for the selected move
   * @param xUserId Unique ID for current user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public playMoveCodePost(moveCode: string, xUserId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public playMoveCodePost(moveCode: string, xUserId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public playMoveCodePost(moveCode: string, xUserId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public playMoveCodePost(moveCode: string, xUserId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (moveCode === null || moveCode === undefined) {
      throw new Error('Required parameter moveCode was null or undefined when calling playMoveCodePost.');
    }

    if (xUserId === null || xUserId === undefined) {
      throw new Error('Required parameter xUserId was null or undefined when calling playMoveCodePost.');
    }

    let headers = this.defaultHeaders;
    if (xUserId !== undefined && xUserId !== null) {
      headers = headers.set('x-user-id', String(xUserId));
    }

    // authentication (ApiKey) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["X-Api-Key"]) {
      headers = headers.set('X-Api-Key', this.configuration.apiKeys["X-Api-Key"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.request<any>('post', `${this.basePath}/play/${encodeURIComponent(String(moveCode))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Reveal current play&#x27;s outcome
   * 
   * @param xUserId Unique ID for current user
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public playRevealGet(xUserId: string, observe?: 'body', reportProgress?: boolean): Observable<PlayResult>;
  public playRevealGet(xUserId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PlayResult>>;
  public playRevealGet(xUserId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PlayResult>>;
  public playRevealGet(xUserId: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (xUserId === null || xUserId === undefined) {
      throw new Error('Required parameter xUserId was null or undefined when calling playRevealGet.');
    }

    let headers = this.defaultHeaders;
    if (xUserId !== undefined && xUserId !== null) {
      headers = headers.set('x-user-id', String(xUserId));
    }

    // authentication (ApiKey) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["X-Api-Key"]) {
      headers = headers.set('X-Api-Key', this.configuration.apiKeys["X-Api-Key"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
    ];

    return this.httpClient.request<PlayResult>('get', `${this.basePath}/play/reveal`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
